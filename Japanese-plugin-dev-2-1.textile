h1. ファンクションタグ プラグインの開発について

h1. +はじめに+

今回は既に「テストドリブンでのプラグインの開発について」で紹介しているファンクションタグについて、改めて解説させていただきます。

h1. +ファンクションタグとは？+

ファンクションタグとは、タグの内部処理を行い、その結果をブログ記事やウェブページなどに出力するものです。

前回のファンクションタグ"&lt;MTHelloWorld&gt;"は、特に処理をせず毎回"Hello, world!"を出力するだけの物でしたが、今回はデータベース処理なども含めて解説します。

h1. +プラグインの仕様とテストケースの作成+

h2. 仕様の策定

仕様としては以下を満たす実装を行います。

* システムのプラグイン設定画面での表示
** プラグイン名：「サンプルプラグイン ファンクションタグ 1.0」
** 詳細：「ファンクションタグ テストプラグイン」
** 詳細＞ドキュメント：「http://www.example.com/docs/」
** 詳細＞プラグイン作者：「http://www.example.com/about/」
** リソース：「タグ：&lt;$MTCSSByCategory$&gt;」
* ブログ記事アーカイブのテンプレートの&lt;head&gt;に"&lt;MTCSSByCategory&gt;"タグを追加するだけ
* ブログ記事にカテゴリが無い場合は、何も出力しない
* ブログ記事にカテゴリがある場合は以下の処理をする
** カテゴリの親子関係を確認する
** 親カテゴリの場合は、"cat-（$category-&gt;basename）"というフォルダ名を作成する
** 親カテゴリがある場合は、"cat-（$parent-&t;basename）-（$category-&gt;basename）"というフォルダ名を作成する
** 親子関係は孫や孫の子など階層に制限無し
** このフォルダ名から、CSS名をmt-confing.cgiに設定されているStaticWebPath配下のファイルとヒモ付けます
*** mt-config.cgiに設定されているStaticWebPath配下の"support"ディレクトリ以下のCSSにひもづける　例）"/mt-static/support/css/cat-foo-subfoo/screen.css"
** cssファイルを配置するHTMLタグを出力する　"&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css" /&gt;"
* 書き込まれたCSSファイルのパスにCSSを配置すると、CSSの要素が新設や上書きされる
* このタグはブログ記事アーカイブ以外、例えばカテゴリアーカイブなどでは動作せずエラーとなります。

h2. テスト環境の準備

"$MT_DIR/t/mysql-test.cfg"に以下の一行を追加

<pre>
StaticWebPath /mt-static/
</pre>

h2. テストファイルの配置位置など

従来と同じく"$MT_DIR/t/"配下になります。

<pre>
例）00-compile.t, 01-tags.t

$MT_DIR/
|__ plugins/
   |__ MyPlugin05/
      |__ t/
         |＿ 00-compile.t
         |＿ 01-tags.t
</pre>

h2. テストケース１（00-compile.t）の作成

前々回行ったMyPlugin03と基本的に同じです。各オブジェクトが正しくロードされているかを確認します。

<pre>
use strict;
use lib qw( t/lib lib extlib );
use warnings;
use MT;
use Test::More tests => 5;
use MT::Test;

ok(MT->component ('MyPlugin05'), "MyPlugin05 plugin loaded correctry");

require_ok('MyPlugin05::L10N');
require_ok('MyPlugin05::L10N::ja');
require_ok('MyPlugin05::L10N::en_us');
require_ok('MyPlugin05::Tags');

1;
</pre>

h2. テストケース２（01-tags.t）の作成

テストするのは以下の３項目です。

# 空文字列をインプットすると、空文字列が戻ってくる。
# 親子カテゴリを持ったエントリー１件を取得し、CSSのリンク"&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css" /&gt;"が戻ってくる。
# カテゴリを持たないエントリー１件を取得し、空文字列が戻ってくる。

<pre>
（前略）
#===== Edit here
my $test_json = <<'JSON';
[
{ "r" : "1", "t" : "", "e" : ""},
{ "r" : "1", "t" : "<mt:Entries id=\"7\"><MTCSSByCategory></mt:Entries>",
 "e" : "<link rel=\"stylesheet\" href=\"/mt-static/support/css/cat-foo-subfoo/screen.css\" type=\"text/css\" />"},
{ "r" : "1", "t" : "<mt:Entries id=\"8\"><MTCSSByCategory></mt:Entries>", "e" : ""}
]
JSON
#=====
</pre>

h1. ファンクションタグ プラグインの開発（Perl）

前々章で作成したMyPlugin03を元にプラグインを作成します。

h2. config.yaml

グローバル・モディファイアの追加には以下のように"tags"=&gt; "modifier"=&gt; "モディファイア名" =&gt; $プラグイン名::ハンドラ名 を記述します。

<pre>
id: MyPlugin05
name: <__trans phrase="Sample Plugin function tag">
version: 1.0
description: <__trans phrase="_PLUGIN_DESCRIPTION">
author_name: <__trans phrase="_PLUGIN_AUTHOR">
author_link: http://www.example.com/about/
doc_link: http://www.example.com/docs/
l10n_class: MyPlugin05::L10N

tags:
    function:
        CSSByCategory: $MyPlugin05::MyPlugin05::Tags::_hdlr_cssbycategory
</pre>

h2. L10N.pm

<pre>
package MyPlugin05::L10N;
use strict;
use base 'MT::Plugin::L10N';

1;
</pre>

h2. L10N/en_us.pm

<pre>
package MyPlugin05::L10N::en_us;

use strict;
use base 'MyPlugin05::L10N';
use vars qw( %Lexicon );

%Lexicon = (
    '_PLUGIN_DESCRIPTION' => 'Sample function tag',
    '_PLUGIN_AUTHOR' => 'Plugin author',
);

1;
</pre>

h2. L10N/ja.pm


<pre>
package MyPlugin05::L10N::ja;

use strict;
use base 'MyPlugin05::L10N::en_us';
use vars qw( %Lexicon );

%Lexicon = (
    'Sample Plugin function tag' => 'サンプルプラグイン ファンクションタグ',
    '_PLUGIN_DESCRIPTION' => 'ファンクションタグ テストプラグイン',
    '_PLUGIN_AUTHOR' => 'プラグイン作者',
);

1;
</pre>

h2. Tags.pm

<pre>
package MyPlugin05::Tags;
use strict;

sub _hdlr_cssbycategory {
    my ($ctx, $args) = @_;

    my $entry = $ctx->stash('entry')
        || $ctx->error(MT->translate('You used an [_1] tag outside of the proper context.', 'CSSByCategory'));

    my $cat = $entry->category() || return;

    my @basenames = ();
    while (1){
         if ($cat->parent() == 0) {
             push (@basenames, $cat->basename());
             last;
         }
         push (@basenames, $cat->basename());
         $cat = MT::Category->load($cat->parent());
    }

    my $cat_tmp = 'cat-' . (join '-', reverse @basenames);
    $cat_tmp .= '/screen.css';

    my $mt = MT->instance;
    my $css_dir = $mt->config('StaticWebPath') || '/mt-static/';
    unless ($css_dir =~ m/\/$/) {
        $css_dir .= '/';
    }
    $css_dir .= 'support/css/';

    return '<link rel="stylesheet" href="' . $css_dir . $cat_tmp . '" type="text/css" />';
}

1;
</pre>

h2. 解説

* 初めにpackage宣言をし、"use strict;"しています。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-01.png]]

* ハンドラ関数宣言と呼び出し時の"$ctx", "$args"の代入です。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-02.png]]

* $ctx-&gt;stash('entry')とすると、今処理をしているEntryオブジェクトが取得できます。
Entryオブジェクトが取得できない場合、エラーを出力します。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-03.png]]

* Entryオブジェクトからカテゴリを取得します。取得できない場合はブログ記事にカテゴリが設定されていないため、何も出力せず処理を抜けます（return）。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-04.png]]

* @basenames配列を用意し、ブログ記事に設定されているカテゴリの"basename(カテゴリアーカイブに用いるURL PATH）" を孫＞子＞親の順に格納していきます。
カテゴリの"parent"には親カテゴリのIDが入っています。親の場合は"0"が入っているのでそこで処理を終了します。
カテゴリを呼び出すには１９行目の"MT::Category-&gt;load($cat_id);"を用います。今回は子や孫カテゴリですので、親カテゴリのカテゴリ idである"$cat-&gt;parent()"をloadの引数として渡します。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-05.png]]

* @basename配列の順を「孫＞子＞親」からreverseの利用で「親＞子＞孫」の順に変更。
変更後、'-'でjoinし文字列にします。その上で初めに"cat-"を、終わりに"/screen.css"を追加し$cat_tmpに代入します。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-06.png]]

* "MT-&gt;instance"でアプリケーションの情報を取得し、その中のStaticWebPath設定を$css_dirに代入します。StaticWebPathの設定がされていない場合'/mt-static/'を指定します。
$css_dirの末尾に'/'があるか確認し、無い場合は付加します。その後'support/css/'を追加しています。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-07.png]]

* 最後にPATHやタグを追加しreturnします。
returnされる値は'&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css/"&gt;'のような形になります。

[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-08.png]]

h1. +ファンクションタグ プラグインの開発（PHP）+

h2. function.mtcssbycategory.php

ファイル名はファンクションタグである事と&lt;MTCSCByCategory&gt;タグである事から、function.mtcssbycategory.phpとなります。

<pre>
<?php
    function smarty_function_mtcssbycategory($args, &$ctx) {
        $entry = $ctx->stash('entry');
        if (!$entry) {
             return $ctx->error('You used an MTCSSByCategory tag outside of the proper context.');
        }

        $cat = $entry->category();
        if (!$cat) {
            return;
        }

        while (1) {
            if ($cat->parent == 0) {
                $basenames[] = $cat->basename;
                break;
            }
            $basenames[] = $cat->basename;
            $loaded = $cat->Load("category_id = " . $cat->parent);
        }

        $cat_tmp = 'cat-' . join ('-', array_reverse($basenames));
        $cat_tmp .= '/screen.css';

        $mt = MT::get_instance();
        $css_dir = $mt->config('StaticWebPath') or '/mt-static/';
        if (!ereg('\/$', $css_dir)) {
            $css_dir .= '/';
        }
        $css_dir .= 'support/css/';

        return '<link rel="stylesheet" href="' . $css_dir . $cat_tmp . '" type="text/css" />';
    }
?>
</pre>

h2. 解説

functionタグの作り方はPerl版と大きな差がありません。大きく違っている場所を *強調* しました。

* function名は *smarty* 記法にのっとって *smarty_function_mtcssbycategory* となります。一緒に呼び出し時の"$args","$ctx"の取得を行います。Perl版とは位置が逆になっている事に注意してください。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-09.png]]

* @$ctx->stash('entry')@ とすると、今処理をしているEntryオブジェクトが取得できます。Entryオブジェクトが取得できない場合、エラーを出力します。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-10.png]]

* Entryオブジェクトからカテゴリを取得します。取得できない場合はブログ記事にカテゴリが設定されていないため、何も出力せず処理を抜けます（return）。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-11.png]]

* *basenames[]* 配列を用意し、ブログ記事に設定されているカテゴリの"basename(カテゴリアーカイブに用いるURL PATH）"を孫＞子＞親の順に格納していきます。
カテゴリの"parent"には親カテゴリのIDが入っています。親の場合は"0"が入っているのでそこで処理を終了します。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-12.png]]
$catは既にカテゴリオブジェクトなので @"$cat->Load()"@ でデータベースから値の取得ができます。何も無いところから新しくカテゴリオブジェクトをロードするには以下のようにする必要があります。
<pre>
$category = new Category;
$loaded = $category->Load("category_id = " . $cat->parent);
$cat = $category;
</pre>

* basename[]配列の順を「孫＞子＞親」から *array_reverse* の利用で「親＞子＞孫」の順に変更。変更後、'-'でjoinし文字列にします。その上で初めに"cat-"を、終わりに"/screen.css"を追加し$cat_tmpに代入します。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-13.png]]

* *"MT::get_instance()"* でアプリケーションの情報を取得し、その中のStaticWebPath設定を$css_dirに代入します。StaticWebPathの設定がされていない場合'/mt-static/'を指定します。
$css_dirの末尾に'/'があるか確認し、無い場合は付加します。その後'support/css/'を追加しています。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-14.png]]

* 最後にPATHやタグを追加しreturnします。
returnされる値は'&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css/"&gt;'のような形になります。
[[https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/images/02-01-15.png]]

h1. +ファイルの配置+

<pre>
$MT_DIR/
|__ plugins/
   |__ MyPlugin05/
      |__ config.yaml
      |__ lib/
      |  |＿ MyPlugin05/
      |     |__ L10N.pm
      |     |＿ L10N/
      |     |  |＿ en_us.pm
      |     |  |＿ ja.pm
      |     |＿ Tags.pm
      |__ php/
      |  |＿function.mtcssbycategory.php
      |__ t/
         |＿00-compile.t
         |＿01-tags.t
</pre>

h1. +テストの実行+

では、作成したプラグインに対してテストを行います。

h2. 00-complie.t

<pre>
$ cd $MT_DIR
$ perl plugins/MyPlugin05/t/00-compile.t
1..5
ok 1 - MyPlugin05 plugin loaded correctry
ok 2 - require MyPlugin05::L10N;
ok 3 - require MyPlugin05::L10N::ja;
ok 4 - require MyPlugin05::L10N::en_us;
ok 5 - require MyPlugin05::Tags;
</pre>

h2. 01-tags.t

<pre>
$ perl plugins/MyPlugin05/t/01-tags.t
1..7
ok 1 - 'blog-name' template found
ok 2 - Test blog loaded
ok 3 - Test entry loaded
ok 4 - perl test 1
ok 5 - perl test 2
ok 6 - perl test 3
ok 7 - ok - php test 1 ok - php test 2 ok - php test 3
</pre>

h2. proveコマンドでのテスト

<pre>
$ prove plugins/MyPlugin05/t/*.t
plugins/MyPlugin05/t/00-compile....ok
plugins/MyPlugin05/t/01-tags.......ok
All tests successful.
Files=2, Tests=12, 27 wallclock secs (12.70 cusr +  5.31 csys = 18.01 CPU)
</pre>

テストでの確認は終了しました。実際に管理画面からブログ記事アーカイブの"&lt;title&gt;"タグの上に"&lt;MTCSSByCategory&gt;"タグを記入し、再構築すると"&lt;title&gt;"タグの上にカテゴリ毎のCSSファイルのリンクが書き込まれます。

* 記入

<pre>
（前略）
    <MTCSSByCategory>
    <title><$mt:EntryTitle encode_html="1"$> - <$mt:BlogName encode_html="1"$></title>
</head>
（後略）
</pre>

* 出力

<pre>
（前略）
    <link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css" />
    <title>Verse 4 - none</title>
</head>
（後略）
</pre>

h1. +ブログ環境でのテスト+

* MTの管理画面が利用できる環境を用意します。（新規作成することを推奨します。）
* クラシック ウェブサイト ＞ クラシックブログを作成します。
* 今回作成したMyPlugin05をPlugin配下に配置します。
* ブログ記事 アーカイブのテンプレートに、上記の形で&lt;title&gt;の上に&lt;MTCSSByCategory&gt;を記入し保存します。
* ブログ記事メニューのカテゴリから、親カテゴリ"foo"、子カテゴリ"subfoo"を作成してください。
* ブログ記事を３つ投稿します。１．カテゴリなし、２．カテゴリ"foo"、３．カテゴリ"subfoo"
* 各ブログ記事の出力結果の&lt;title&gt;タグの１行上をチェックします。（StaticWebPathが/mt-static/だった場合）
** カテゴリなし：空行
** 親カテゴリ：&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo/screen.css" type="text/css" /&gt;
** 子カテゴリ：&lt;link rel="stylesheet" href="/mt-static/support/css/cat-foo-subfoo/screen.css" type="text/css" /&gt;
* "/mt-static/support/"以下にディレクトリ"css/cat-foo"と"css/cat-foo-subfoo"を作成します。
* 作成したディレクトリにCSSファイル "screen.css"を作成します。
* 簡単な例
** /mt-static/support/css/cat-foo/screen.css
<pre>#container-inner,
#content {
    background-color: #008080;
}
</pre>
** /mt-static/support/css/cat-foo-subfoo/screen.css
<pre>#container-inner,
#content {
    background-color: #008000;
}
</pre>
* これらのファイルを置き、ブラウザで閲覧する事でCSSの内容がカテゴリごとに上書きされている事がわかります。実際に利用される際には、基本となるのデザイン（カテゴリが無いもの）を作成し、そこからカテゴリ毎にCSSの上書きを行うといった手順で作業を行ってください。

h1. +まとめ+

少し盛り沢山な内容でしたがいかがだったでしょうか？ファンクションタグを"Hellow, world!"だけで終わらせるのはもったいないので、実際に使えるネタとしてあげてみました。またファンクションタグの場合、Perl版とPHP版の違いが大きくない事も見て取れたのではないでしょうか。

現在のコードですと、エラーハンドリング（問題を検知すること）や、設定など実装されていない部分はありますし、ブログ記事には利用できますが、カテゴリアーカイブでは利用できないといった問題もあります。

この続きは是非ご自分で改造し、活用してみてください。

h1. +プラグインダウンロード+

[[MyPlugin05.zip(6.64KB)|https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/files/MyPlugin05.zip]]

h1. +プラグイン開発ガイド インデックス+

# [[プラグイン開発のためのファーストステップ|Japanese-plugin-dev-1-1]]
# [[レジストリ、YAMLについて|Japanese-plugin-dev-1-2]]
# [[環境変数について|Japanese-plugin-dev-1-3]]
# [[プラグインのローカライゼーションについて|Japanese-plugin-dev-1-4]]
# [[テストドリブンでのプラグインの開発について|Japanese-plugin-dev-1-5]]
# [[グローバル・モディファイアプラグインの開発について|Japanese-plugin-dev-1-6]]
# ファンクションタグ プラグインの開発について
# [[ブロックタグ プラグインの開発について|Japanese-plugin-dev-2-2]]
# [[コンディショナルタグ プラグインの開発について|Japanese-plugin-dev-2-3]]
# [[プラグインのデバッグ|Japanese-plugin-dev-2-4]]
# [[プラグインの設定方法|Japanese-plugin-dev-3-1]]
# [[コールバックとフックポイント|Japanese-plugin-dev-3-2]]
# [[スケジュールタスクの開発|Japanese-plugin-dev-3-3]]
# [[MTオブジェクトの利用方法|Japanese-plugin-dev-3-4]]
