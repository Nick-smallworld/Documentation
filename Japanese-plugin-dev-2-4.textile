h1. デバッグ

h2. はじめに

今回はプラグイン開発の中で何度もぶつかる「バグ」を「退治する方法（デバッグ）」を解説します。

h2. テストでのデバッグ

これまでの解説でテストドリブン開発について何度も触れてきました。ここでエラーが発生すると情報が表示されるので、それに沿ってバグを見つけデバッグをするのが、まず行うべき事です。

例えば以下のような場合が考えられます。

* テスト途中でエラーが発生する
** 必要とされているモジュールが入っていない
*** 正しく読み込まれているかを00-compile.tで確認する、必要であれば00-complie.tに行を追加してテストを行う
** コード上のモジュールの読み先が誤っている
*** 例）本来読み込むのは”MyPlugin07/lib/MyPlugin07/Tags.pm"だが、記述ミスで"MyPlugin06/lib/MyPlugin06/Tags.pm"を呼んでいる
** シンタックスエラー
*** 表示されるエラーメッセージを元にコードを修正する
* プラグイン一覧画面で正しい情報が表示されない、多言語対応されない
** config.yamlの情報が正しいか確認・修正する
** L10N.pm, L10N/en_us.pm, L10N/ja.pm に正しくパスが通っているか確認・修正する
** 同じく、内容が正しいか確認・修正する（例：L10Nには @"Test Code" => ”テストコード"@ と書かれているが、config.yamlには”Test Codes"と書いてあるため日本語化されない）

h2. doLog関数によるログ取得（perl版）

通常「Printfデバッグ」などと呼ばれる方法ですが、Perl版のプラグインではprintfが利用できないため代わりとなるdoLog関数を用意し、それを利用します。

<pre>
sub doLog {
    my ($msg, $class) = @_;
    return unless defined($msg)

    require MT::Log;
    my $log = new MT::Log;
    $log->message($msg);
    $log->level(MT::Log::DEBUG());
    $log->class($class);
    $log->save or die $log->errstr;
}
</pre>

* $msg : ログに残したい文言
* level : ログレベル

|MT::Log::INFO()|1|情報|
|MT::Log::WARNING()|2|警告|
|MT::Log::ERROR()|4|エラー|
|MT::Log::SECURITY()|8|セキュリティ|
|MT::Log::DEBUG()|16|デバッグ|

* $class : ログクラス
5.1からクラスが細かく設定出きるようになりました

|author|ユーザ|
|blog|ブログ|
|website|ウェブサイト|
|entry|ブログ記事|
|page|ウェブページ|
|category|カテゴリ|
|folder|フォルダ|
|tag|タグ|
|comment|コメント|
|ping|トラックバック|
|search|検索|
|asset|アイテム|
|template|テンプレート|
|theme|テーマ|
|publish|出力|
|system|システム|

呼び出し方は以下のように行います。

* 単純な呼び出し例
値や、関数の戻り値、メッセージなどを出力します。

<pre>
doLog($some_msg_or_value);
</pre>

* クラスを指定した呼び出し例
後で検索しやすいようにクラスを指定します。（5.1からクラスが細かく設定出きるようになりました）

<pre>
doLog($some_msg_or_value, 'entry');
</pre>

* Data::Dumperを利用したデータの詳細出力例
MTオブジェクトやリファレンスなどを階層的に展開して表示します。ログの出力量が多いため利用時は気をつけてください。

<pre>
use Data::Dumper;
doLog(Dumper($MT_Blog_Object));
</pre>

この様にすると、システムログとしてデータが保存されますので、これを参考にデバッグしていきます。


