h1. 独自オブジェクトの作成

h1. +はじめに+

前章でMTオブジェクトの利用方法について解説しましたが、既存の物だけではなく自分でもMTオブジェクトを作成する事ができます。

今回は、こういった独自オブジェクトの作成について解説します。

h1. +独自オブジェクトとは？+

MT::Objectから派生させた、独自のMTオブジェクトの事をさします。

プラグインでMTオブジェクトを追加する場合は、config.yamlでのオブジェクト情報の記載と、MTオブジェクトのPerlモジュールが必要となります。

h1. +独自オブジェクトの作成+

独自オブジェクト（MT::Foo）を例として作成法を解説します。

h2. MT::Fooの仕様

* MT::Objectを継承したクラス
* モジュール名はMT::Foo
* タイプ名はfoo
* 指定カラム
** id : オブジェクトID
** blog_id : ブログID
** title : タイトル（最大２５５文字）
** bar : テキスト情報
* インデックス
** blog_id
** created_on
** modified_on
* データソース : mt_foo
* プライマリキー : id
* 作成日時、修正日時を自動記録

h2. config.yaml

config.yamlに記載する情報は少ないです。

<pre>
id: MyPlugin11
key: MyPlugin11
name: <__trans phrase="Sample Plugin Uniquely Object">
version: 1.0
description: <__trans phrase="_PLUGIN_DESCRIPTION">
author_name: <__trans phrase="_PLUGIN_AUTHOR">
author_link: http://www.example.com/about/
doc_link: http://www.example.com/docs/
l10n_class: MyPlugin11::L10N

schema_version: 0.01
object_types:
    foo: MT::Foo
</pre>

h3. 解説

* schema_version: 0.01
** プラグインのスキーマのバージョンを記載します。
** プラグインのインストール時と、スキーマバージョンのアップデート時にスキーマのアップデートが行われます。
* object_types
** オブジェクトのタイプとクラス名を指定します。
* foo: MT::Foo
** タイプ名 : foo
** クラス名 : MT::Foo

h2. MT/Foo.pm

簡単な例としてMT::Fooを作成します。ここにデータベーステーブルの情報や組み込み関数などを記載します。

<pre>
package MT::Foo;
use strict;

use base qw( MT::Object );

__PACKAGE__->install_properties ({
    column_defs => {
        'id'      => 'integer not null auto_increment',
        'blog_id' => 'integer not null',
        'title'   => 'string(255) not null',
        'bar'     => 'text',
    },
    indexes => {
        blog_id => 1,
        created_on => 1,
        modified_on => 1,
    },
    child_of => 'MT::Blog',
    audit => 1,
    datasource  => 'foo',
    primary_key => 'id',
    class_type  => 'foo',
});

1;
</pre>

h3. 解説

* @package MT::Foo;@
** パッケージ名をMT::Fooに指定しています。
* @use base qw( MT::Object );@
** MT::Objectクラスを継承している事を明記します。
* @__PACKAGE__->install_properties ({});@
** オブジェクトの色々な情報を指定し、MTアプリケーションに設定を知らせます。
* @column_defs => {},@
** 以下の４つのカラムを指定します。
*** 'id' => 'integer not null auto_increment',
*** 'blog_id' => 'integer not null',
*** 'title' => 'string(255) not null',
*** 'bar' => 'text',
* @indexes => {},@
** 以下の３つのカラムをデータベーステーブルのインデックスとして指定します。
*** blog_id => 1,
*** created_on => 1,
*** modified_on => 1,
* @audit => 1,@
** オブジェクトの作成日時と変更日時を自動的に登録するようにします。
** created_on, created_by, modified_on, modified_byの４つのカラムが自動的に追加されます。
* @datasource  => 'foo',@
** データベーステーブル名をmt_fooにします。
* @primary_key => 'id',@
** データベーステーブルのプライマリーキーをidにします。
* @class_type  => 'foo',@
** MT::Fooクラスのタイプ名をfooにします。

h2. カラムの型とオプション

h3. カラムの型

|string|文字列。サイズを指定します（例：string(255)）|
|text|テキスト|
|boolean|真偽値|
|smallint|16bitの整数|
|integer|32bitの整数|
|float|浮動小数点|
|blob|バイナリデータ|
|datetime|日時|
|timestamp|日時。保存時に自動的にアップデートされます。|

h3. カラムのオプション

|not null|必須項目です。空は許されません。|
|auto_increment|新規オブジェクト作成時に自動的に整数値がカウントアップされます。|

h2. ファイルの配置

<pre>
$MT_DIR/
|__ plugins/
   |__ MyPlugin11/
      |__ config.yaml
      |__ lib/
         |＿ MyPlugin11/
         |  |__ L10N.pm
         |  |＿ L10N/
         |     |＿ en_us.pm
         |     |＿ ja.pm
         |＿ MT
            |__ Foo.pm
</pre>

h1. +MT::Fooの利用方法+

h2. インスタンスの作成

h2. 値の設定

h2. 値の取得

h2. インスタンスの削除

h1. +プラグインダウンロード+

[[MyPlugin11.zip(2.40KB)|https://github.com/movabletype/Documentation/raw/master/assets/Japanese-plugin-dev/files/MyPlugin11.zip]]

h1. +まとめ+

h1. +プラグイン開発ガイド インデックス+

# [[プラグイン開発のためのファーストステップ|Japanese-plugin-dev-1-1]]
# [[レジストリ、YAMLについて|Japanese-plugin-dev-1-2]]
# [[環境変数について|Japanese-plugin-dev-1-3]]
# [[プラグインのローカライゼーションについて|Japanese-plugin-dev-1-4]]
# [[テストドリブンでのプラグインの開発について|Japanese-plugin-dev-1-5]]
# [[グローバル・モディファイアプラグインの開発について|Japanese-plugin-dev-1-6]]
# [[ファンクションタグ プラグインの開発について|Japanese-plugin-dev-2-1]]
# [[ブロックタグ プラグインの開発について|Japanese-plugin-dev-2-2]]
# [[コンディショナルタグ プラグインの開発について|Japanese-plugin-dev-2-3]]
# [[プラグインのデバッグ|Japanese-plugin-dev-2-4]]
# [[プラグインの設定方法|Japanese-plugin-dev-3-1]]
# [[コールバックとフックポイント|Japanese-plugin-dev-3-2]]
# [[スケジュールタスクの開発|Japanese-plugin-dev-3-3]]
# [[MTオブジェクトの利用方法|Japanese-plugin-dev-3-4]]
# 独自オブジェクトの作成